import React, { useRef, useState } from "react";
import {
  AddIcon,
  ArrowLeftIcon,
  CheckIcon,
  EditIcon,
  HamburgerIcon,
} from "@chakra-ui/icons";
import {
  Box,
  Button,
  Container,
  Divider,
  Drawer,
  DrawerBody,
  DrawerCloseButton,
  DrawerContent,
  DrawerFooter,
  DrawerHeader,
  DrawerOverlay,
  Flex,
  FormControl,
  FormLabel,
  Heading,
  Input,
  Spacer,
  Stack,
  Text,
  Textarea,
  useDisclosure,
  useToast,
} from "@chakra-ui/react";
import { Avatar } from "@chakra-ui/react";
import Head from "next/head";
import Router, { useRouter } from "next/router";
import { useRecoilState, useRecoilValue } from "recoil";
import { postsState } from "../../atoms/atom";
import { pushQuestion } from "../../firebase";

const handler = (path) => {
  Router.push(path);
};

const Edit = () => {
  const [posts, setPosts] = useRecoilState(postsState);
  const { isOpen, onOpen, onClose } = useDisclosure();
  const btnRef = useRef();
  const router = useRouter();
  const toast = useToast();

  const editPost = posts.filter((post) => {
    return post.id === Number(router.query.id);
  });

  const [newTitle, setNewTitle] = useState(editPost[0].title);
  const [newText, setNewText] = useState(editPost[0].text);

  const handleSetNewTitle = (e) => {
    setNewTitle(e.target.value);
  };
  const handleSetNewText = (e) => {
    setNewText(e.target.value);
  };

  const handleEditPost = (id, title, text) => {
    const foundPost = posts.findIndex((post) => post.id === id);
    // if(title === "" || text === ""){
    //   return toast({
    //     title: "文字を入力してください",
    //     position: "top",
    //     status: 'warning',
    //     duration: 2000,
    //     isClosable: true,
    //   });
    // }

    const replaceItemAtIndex = (posts, foundPost, newValue) => {
      return [
        ...posts.slice(0, foundPost),
        newValue,
        ...posts.slice(foundPost + 1),
      ];
    };

    setPosts(() => {
      
        return replaceItemAtIndex(posts, foundPost, {
          ...posts[foundPost],
          title: title,
          text: text,
        });
      
    });

    pushQuestion({ name: editPost[0]?.name, title: newTitle, text: newText });
    
    toast({
      title: "保存しました.",
      position: "top",
      status: "success",
      duration: 1000,
      isClosable: true,
    });
    router.push("/user");
  };
  

  


  return (
    <>
      <Head>
        <title>みんなの質問</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Container
        h="100vh"
        minH="100%"
        maxW="100%"
        bg="#DDE3DE"
        m="0"
        padding="1rem"
      >
        <Heading pt="2" pb="2" pl="5" bg="#C5D8D1">
          <Flex alignItems="center">
            {/* エラー文 404 (Not Found) */}
            <HamburgerIcon ref={btnRef} onClick={onOpen} mr="24px" />

            <Drawer
              isOpen={isOpen}
              placement="left"
              onClose={onClose}
              finalFocusRef={btnRef}
            >
              <DrawerOverlay />
              <DrawerContent>
                <DrawerCloseButton />
                <DrawerHeader>Your account</DrawerHeader>

                <DrawerBody>
                  <Flex mb="24px" alignItems="center">
                    <Avatar src="https://bit.ly/broken-link" mr="8px" />
                    <Text>リヴァイ</Text>
                  </Flex>

                  <Flex
                    alignItems="center"
                    cursor="pointer"
                    onClick={() => handler("/posting")}
                    _hover={{ background: "#8FBFE0", borderRadius: "20px" }}
                  >
                    <AddIcon mr="8px" />
                    <Text lineHeight="48px">質問を作成</Text>
                  </Flex>

                  <Flex
                    alignItems="center"
                    mb="16px"
                    _hover={{ background: "#8FBFE0", borderRadius: "20px" }}
                  >
                    <EditIcon mr="8px" />
                    <Text lineHeight="48px">作成した質問を編集</Text>
                  </Flex>
                  <Box textAlign="center">
                    <Button
                      mt="40px"
                      colorScheme="red"
                      onClick={() => handler("/")}
                    >
                      Log Out
                    </Button>
                  </Box>
                </DrawerBody>

                <DrawerFooter>
                  <Button variant="outline" mr={3} onClick={onClose}>
                    Cancel
                  </Button>
                </DrawerFooter>
              </DrawerContent>
            </Drawer>
            <Text>みんなの質問</Text>
          </Flex>
        </Heading>

        <Container minH="calc(100% - 64px)" maxW="100%" bg="white" padding="5">
          <form>
            <Container py={["20px", "60px"]} maxW="container.lg">
              <Stack spacing={[2, 6]}>
              <FormControl>
                  <Flex direction={["column", "row"]}>
                    <Flex minW={24} width={24}>
                      <FormLabel>名前</FormLabel>
                      <Spacer />
                      <Box>:</Box>
                    </Flex>
                    <Box ml={3}>{editPost[0]?.name}</Box>
                  </Flex>
                </FormControl>
                <Divider borderColor="gray" borderBottomWidth="2px" />
                <FormControl>
                  <Flex direction={["column", "row"]}>
                    <Flex minW={24} width={24}>
                      <FormLabel>タイトル</FormLabel>
                      <Spacer />
                      <Box>:</Box>
                    </Flex>
                    <Box>
                      <Input
                        ml={[0, 6]}
                        borderColor="#bebaba"
                        borderWidth="2px"
                        value={newTitle}
                        onChange={handleSetNewTitle}
                      />
                    </Box>
                  </Flex>
                </FormControl>
                <Divider borderColor="gray" borderBottomWidth="2px" />
                <FormControl>
                  <Flex minH={44} direction={["column", "row"]}>
                    <Flex minW={24} width={24}>
                      <FormLabel>質問内容</FormLabel>
                      <Spacer />
                      <Box>:</Box>
                    </Flex>
                    <Textarea
                      ml={[0, 6]}
                      borderColor="#bebaba"
                      borderWidth="2px"
                      h="180px"
                      value={newText}
                      onChange={handleSetNewText}
                    />
                  </Flex>
                </FormControl>
                <Divider borderColor="gray" borderBottomWidth="2px" />
              </Stack>
            </Container>
            <Spacer />
          </form>
            <Box pos="absolute" bottom="8" right="0">
              <Button
                background="#F4D1AE"
                _hover={{ opacity: "0.8" }}
                onClick={() => handler("/editPosts")}
                mr="2"
              >
                <ArrowLeftIcon mr="2" />
                戻る
              </Button>
              <Button
                colorScheme="blue"
                color="#FFFFFF"
                mr="28px"
                type="submit"
                onClick={()=>handleEditPost(
                  editPost[0]?.id,
                  newTitle,
                  newText
                )}
              >
                <CheckIcon mr="2" />
                保存
              </Button>
            </Box>
        </Container>
      </Container>
    </>
  );
};

export default Edit;
