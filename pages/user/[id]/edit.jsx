import React, { useEffect, useState } from "react";
import { ArrowLeftIcon, CheckIcon } from "@chakra-ui/icons";
import {
  Box,
  Button,
  Container,
  Divider,
  Flex,
  FormControl,
  FormLabel,
  Input,
  Spacer,
  Stack,
  Textarea,
  useToast,
} from "@chakra-ui/react";
import Head from "next/head";
import Router, { useRouter } from "next/router";
import { useRecoilState } from "recoil";
// import { pushQuestion } from "../../firebase";
import Header from "../../../src/components/Header";
import styles from "../../../styles/Container.module.css";
import { postsState } from "../../../src/atoms/atom";
import UserButton from "../../../src/components/atoms/button/UserButton";
import BackButton from "../../../src/components/atoms/button/BackButton";

const handler = (path) => {
  Router.push(path);
};

const Edit = () => {
  const [newTitle, setNewTitle] = useState("");
  const [newText, setNewText] = useState("");
  const [posts, setPosts] = useRecoilState(postsState);
  const router = useRouter();
  const toast = useToast();
  const { isReady } = useRouter();

  useEffect(() => {
    if (isReady) {
      setNewTitle(editPost[0].title);
      setNewText(editPost[0].text);
    } else {
      return;
    }
  }, [isReady]);
  const editPost = posts.filter((post) => {
    return post.id === Number(router.query.id);
  });

  const handleSetNewTitle = (e) => {
    setNewTitle(e.target.value);
  };
  const handleSetNewText = (e) => {
    setNewText(e.target.value);
  };

  const handleEditPost = (id, title, text) => {
    const foundPost = posts.findIndex((post) => post.id === id);
    if (title === "" || text === "") {
      return toast({
        title: "文字を入力してください",
        position: "top",
        status: "warning",
        duration: 2000,
        isClosable: true,
      });
    }
    const replaceItemAtIndex = (posts, foundPost, newValue) => {
      return [
        ...posts.slice(0, foundPost),
        newValue,
        ...posts.slice(foundPost + 1),
      ];
    };
    setPosts(() => {
      return replaceItemAtIndex(posts, foundPost, {
        ...posts[foundPost],
        title: title,
        text: text,
      });
    });

    toast({
      title: "保存しました.",
      position: "top",
      status: "success",
      duration: 1000,
      isClosable: true,
    });
    router.push("/editPosts");
  };

  const handleDeletePost = (id) => {
    const result = window.confirm("本当に削除してもよろしいですか?");
    if (result) {
      const foundPost = posts.findIndex((post) => post.id === id);
      const deletePost = [...posts];
      deletePost.splice(foundPost, 1);
      setPosts(deletePost);

      toast({
        title: "削除しました.",
        position: "top",
        status: "error",
        duration: 1000,
        isClosable: true,
      });
      router.push("/editPosts");
    }
  };

  return (
    <>
      <Head>
        <title>みんなの質問</title>
        <meta name="description" content="Generated by create next app" />
      </Head>

      <Container className={styles.mainContainer}>
        <Header />
        <Container className={styles.subContainer}>
          <form>
            <Container py={["20px", "60px"]} maxW="container.lg">
              <Stack spacing={[2, 6]}>
                <FormControl>
                  <Flex direction={["column", "row"]}>
                    <Flex minW={24} width={24}>
                      <FormLabel>名前</FormLabel>
                      <Spacer />
                      <Box>:</Box>
                    </Flex>
                    <Box ml={3}>{editPost[0]?.name}</Box>
                  </Flex>
                </FormControl>
                <Divider borderColor="gray" borderBottomWidth="2px" />
                {/* <FormControl>
                  <Flex direction={["column", "row"]}>
                    <Flex minW={24} width={24}>
                      <FormLabel>タイトル</FormLabel>
                      <Spacer />
                      <Box>:</Box>
                    </Flex>
                    <Box>
                      <Textarea
                        ml={[0, 6]}
                        borderColor="#bebaba"
                        borderWidth="2px"
                        value={newTitle}
                        onChange={handleSetNewTitle}
                      />
                    </Box>
                  </Flex>
                </FormControl> */}
                <FormControl>
                  <Flex direction={["column", "row"]}>
                    <Flex minW={24} width={24}>
                      <FormLabel>質問内容</FormLabel>
                      <Spacer />
                      <Box>:</Box>
                    </Flex>
                    <Input
                      ml={[0, 6]}
                      borderColor="#bebaba"
                      borderWidth="2px"
                      h="32px"
                      value={newTitle}
                      onChange={handleSetNewTitle}
                    />
                  </Flex>
                </FormControl>
                <Divider borderColor="gray" borderBottomWidth="2px" />
                <FormControl>
                  <Flex minH={44} direction={["column", "row"]}>
                    <Flex minW={24} width={24}>
                      <FormLabel>質問内容</FormLabel>
                      <Spacer />
                      <Box>:</Box>
                    </Flex>
                    <Textarea
                      ml={[0, 6]}
                      borderColor="#bebaba"
                      borderWidth="2px"
                      h="180px"
                      value={newText}
                      onChange={handleSetNewText}
                    />
                  </Flex>
                </FormControl>
                <Divider borderColor="gray" borderBottomWidth="2px" />
              </Stack>
            </Container>
            <Spacer />
          </form>
          <Box pos="absolute" bottom="8" right="0">
            <BackButton onClick={() => handler("/user")} />
            <Button
              colorScheme="red"
              onClick={() => handleDeletePost(editPost[0]?.id)}
              mr="2"
            >
              削除する
            </Button>
            <UserButton
              colorScheme={"blue"}
              text={"保存"}
              onClick={() => handleEditPost(editPost[0]?.id, newTitle, newText)}
            />
          </Box>
        </Container>
      </Container>
    </>
  );
};

export default Edit;
